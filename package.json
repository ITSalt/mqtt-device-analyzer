{
  "name": "mqtt-device-analyzer",
  "version": "1.0.0",
  "description": "MQTT broker for IoT device protocol reverse engineering",
  "main": "mqtt-broker.js",
  "scripts": {
    "start": "node mqtt-broker.js",
    "dev": "nodemon mqtt-broker.js",
    "pm2:start": "pm2 start ecosystem.config.js",
    "pm2:start:dev": "pm2 start ecosystem.config.js --env development",
    "pm2:stop": "pm2 stop mqtt-device-analyzer",
    "pm2:restart": "pm2 restart mqtt-device-analyzer",
    "pm2:reload": "pm2 reload mqtt-device-analyzer",
    "pm2:delete": "pm2 delete mqtt-device-analyzer",
    "pm2:logs": "pm2 logs mqtt-device-analyzer",
    "pm2:monit": "pm2 monit",
    "pm2:status": "pm2 status",
    "pm2:setup": "chmod +x setup-pm2.sh && ./setup-pm2.sh",
    "logs:clean": "rm -rf logs/*.log mqtt_logs/*.log",
    "logs:backup": "tar -czf logs-backup-$(date +%Y%m%d-%H%M%S).tar.gz logs/ mqtt_logs/",
    "certs:generate": "chmod +x scripts/generate-certs.sh && ./scripts/generate-certs.sh",
    "test:connections": "node scripts/test-connections.js",
    "health": "curl -s http://localhost:3001/health | jq || curl -s http://localhost:3001/health",
    "setup": "npm install && npm run certs:generate",
    "setup:domain": "npm install && MQTT_DOMAIN=$npm_config_domain npm run certs:generate",
    "config:copy": "cp domain-config.example .env",
    "domain:info": "echo 'Current domain:' && echo ${MQTT_DOMAIN:-localhost}",
    "deploy:staging": "MQTT_DOMAIN=mqtt-staging.yourdomain.com npm run pm2:start",
    "deploy:prod": "MQTT_DOMAIN=mqtt.yourdomain.com npm run pm2:start"
  },
  "keywords": [
    "mqtt",
    "iot",
    "reverse-engineering",
    "protocol-analysis"
  ],
  "author": "Magz Nikitin",
  "license": "MIT",
  "dependencies": {
    "aedes": "^0.48.1",
    "websocket-stream": "^5.5.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
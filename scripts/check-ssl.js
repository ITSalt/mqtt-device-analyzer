#!/usr/bin/env node

// scripts/check-ssl.js - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

const fs = require('fs');
const { execSync } = require('child_process');

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(color, message) {
  console.log(`${color}${message}${colors.reset}`);
}

function checkCertificates() {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...\n');

  const keyPath = './certs/server.key';
  const certPath = './certs/server.crt';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  if (!fs.existsSync(keyPath)) {
    log(colors.red, '‚ùå –§–∞–π–ª server.key –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  if (!fs.existsSync(certPath)) {
    log(colors.red, '‚ùå –§–∞–π–ª server.crt –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  log(colors.green, '‚úÖ SSL —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  try {
    const keyStats = fs.statSync(keyPath);
    const certStats = fs.statSync(certPath);

    const keyMode = (keyStats.mode & parseInt('777', 8)).toString(8);
    const certMode = (certStats.mode & parseInt('777', 8)).toString(8);

    console.log(`üìÅ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:`);
    console.log(`   server.key: ${keyMode} ${keyMode === '600' ? '‚úÖ' : '‚ö†Ô∏è'}`);
    console.log(`   server.crt: ${certMode} ${certMode === '644' ? '‚úÖ' : '‚ö†Ô∏è'}`);

    if (keyMode !== '600') {
      log(colors.yellow, 'üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: chmod 600 certs/server.key');
    }
  } catch (error) {
    log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: ${error.message}`);
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  try {
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:');
    
    const certInfo = execSync(`openssl x509 -in ${certPath} -text -noout`, { encoding: 'utf8' });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const subjectMatch = certInfo.match(/Subject: (.+)/);
    const issuerMatch = certInfo.match(/Issuer: (.+)/);
    const validFromMatch = certInfo.match(/Not Before: (.+)/);
    const validToMatch = certInfo.match(/Not After : (.+)/);

    if (subjectMatch) {
      console.log(`   Subject: ${subjectMatch[1]}`);
    }
    
    if (issuerMatch) {
      console.log(`   Issuer: ${issuerMatch[1]}`);
    }

    if (validFromMatch && validToMatch) {
      const validFrom = new Date(validFromMatch[1]);
      const validTo = new Date(validToMatch[1]);
      const now = new Date();

      console.log(`   Valid from: ${validFrom.toLocaleDateString()}`);
      console.log(`   Valid to: ${validTo.toLocaleDateString()}`);

      if (now < validFrom) {
        log(colors.red, '   ‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      } else if (now > validTo) {
        log(colors.red, '   ‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫');
      } else {
        const daysLeft = Math.ceil((validTo - now) / (1000 * 60 * 60 * 24));
        log(colors.green, `   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π)`);
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º SAN –∑–∞–ø–∏—Å–∏
    const sanMatch = certInfo.match(/X509v3 Subject Alternative Name:\s*\n\s*(.+)/);
    if (sanMatch) {
      console.log(`\nüåê Subject Alternative Names:`);
      const sans = sanMatch[1].split(', ');
      sans.forEach(san => {
        console.log(`   ${san}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
    const domain = process.env.MQTT_DOMAIN || 'localhost';
    console.log(`\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domain}`);

    const cnMatch = certInfo.match(/CN\s*=\s*([^,\n]+)/);
    const cn = cnMatch ? cnMatch[1].trim() : null;

    if (cn === domain) {
      log(colors.green, '   ‚úÖ CN —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–æ–º–µ–Ω–æ–º');
    } else {
      log(colors.yellow, `   ‚ö†Ô∏è  CN (${cn}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–æ–º–µ–Ω–æ–º (${domain})`);
    }

    if (sanMatch) {
      const hasDomainInSan = sanMatch[1].includes(`DNS:${domain}`) || sanMatch[1].includes(`DNS:*.${domain.split('.').slice(1).join('.')}`);
      if (hasDomainInSan) {
        log(colors.green, '   ‚úÖ –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ SAN –∑–∞–ø–∏—Å—è—Ö');
      } else {
        log(colors.red, '   ‚ùå –î–æ–º–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω –≤ SAN –∑–∞–ø–∏—Å—è—Ö');
        log(colors.cyan, '   üí° –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: MQTT_DOMAIN=' + domain + ' npm run certs:recreate');
      }
    }

  } catch (error) {
    log(colors.red, `‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${error.message}`);
  }

  return true;
}

function checkSSLConnection() {
  const domain = process.env.MQTT_DOMAIN || 'localhost';
  const ports = [8883, 8888]; // MQTTS –∏ WSS

  console.log(`\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å ${domain}:`);

  ports.forEach(port => {
    try {
      console.log(`\n   –ü–æ—Ä—Ç ${port}:`);
      const result = execSync(
        `timeout 5s openssl s_client -connect ${domain}:${port} -servername ${domain} </dev/null 2>&1 || echo "Connection failed"`,
        { encoding: 'utf8' }
      );

      if (result.includes('Verify return code: 0')) {
        log(colors.green, '   ‚úÖ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      } else if (result.includes('certificate verify failed')) {
        log(colors.yellow, '   ‚ö†Ô∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π)');
      } else if (result.includes('Connection refused') || result.includes('Connection failed')) {
        log(colors.red, '   ‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω?)');
      } else {
        log(colors.yellow, '   ‚ö†Ô∏è  –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      log(colors.red, `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}: ${error.message}`);
    }
  });
}

function main() {
  console.log('üîê SSL –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MQTT –±—Ä–æ–∫–µ—Ä–∞\n');

  if (checkCertificates()) {
    checkSSLConnection();
  }

  console.log('\nüí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('   npm run certs:recreate  - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã');
  console.log('   npm run test:connections - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã');
  console.log('   npm run health          - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–∫–µ—Ä–∞');
}

main(); 
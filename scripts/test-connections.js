#!/usr/bin/env node

// scripts/test-connections.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ MQTT –±—Ä–æ–∫–µ—Ä–∞

const mqtt = require('mqtt');
const WebSocket = require('ws');
const fs = require('fs');
const tls = require('tls');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const domain = process.env.MQTT_DOMAIN || 'localhost';
const config = {
  mqtt: { host: domain, port: process.env.MQTT_PORT || 1883 },
  mqtts: { host: domain, port: process.env.MQTTS_PORT || 8883, key: './certs/server.key', cert: './certs/server.crt' },
  ws: { url: `ws://${domain}:${process.env.WS_PORT || 8887}` },
  wss: { url: `wss://${domain}:${process.env.WSS_PORT || 8888}`, key: './certs/server.key', cert: './certs/server.crt' }
};

const testMessage = JSON.stringify({
  timestamp: new Date().toISOString(),
  type: 'test',
  message: 'Hello from test client',
  protocol: null // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
});

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(color, protocol, message) {
  console.log(`${color}[${protocol}]${colors.reset} ${message}`);
}

function testMQTT() {
  return new Promise((resolve) => {
    log(colors.blue, 'MQTT', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT...');
    
    const client = mqtt.connect(`mqtt://${config.mqtt.host}:${config.mqtt.port}`);
    
    const timeout = setTimeout(() => {
      client.end();
      resolve({ protocol: 'MQTT', success: false, error: 'Timeout' });
    }, 5000);
    
    client.on('connect', () => {
      clearTimeout(timeout);
      log(colors.green, 'MQTT', '–ü–æ–¥–∫–ª—é—á–µ–Ω! –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      const message = JSON.parse(testMessage);
      message.protocol = 'MQTT';
      
      client.publish('test/mqtt', JSON.stringify(message), (err) => {
        if (err) {
          log(colors.red, 'MQTT', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`);
          client.end();
          resolve({ protocol: 'MQTT', success: false, error: err.message });
        } else {
          log(colors.green, 'MQTT', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
          client.end();
          resolve({ protocol: 'MQTT', success: true });
        }
      });
    });
    
    client.on('error', (err) => {
      clearTimeout(timeout);
      log(colors.red, 'MQTT', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
      resolve({ protocol: 'MQTT', success: false, error: err.message });
    });
  });
}

function testMQTTS() {
  return new Promise((resolve) => {
    log(colors.magenta, 'MQTTS', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTTS...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if (!fs.existsSync(config.mqtts.cert)) {
      log(colors.red, 'MQTTS', 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      resolve({ protocol: 'MQTTS', success: false, error: 'Certificate not found' });
      return;
    }
    
    const clientOptions = {
      host: config.mqtts.host,
      port: config.mqtts.port,
      protocol: 'mqtts',
      rejectUnauthorized: false, // –î–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      ca: fs.readFileSync(config.mqtts.cert)
    };
    
    const client = mqtt.connect(clientOptions);
    
    const timeout = setTimeout(() => {
      client.end();
      resolve({ protocol: 'MQTTS', success: false, error: 'Timeout' });
    }, 5000);
    
    client.on('connect', () => {
      clearTimeout(timeout);
      log(colors.green, 'MQTTS', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      const message = JSON.parse(testMessage);
      message.protocol = 'MQTTS';
      
      client.publish('test/mqtts', JSON.stringify(message), (err) => {
        if (err) {
          log(colors.red, 'MQTTS', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`);
          client.end();
          resolve({ protocol: 'MQTTS', success: false, error: err.message });
        } else {
          log(colors.green, 'MQTTS', '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
          client.end();
          resolve({ protocol: 'MQTTS', success: true });
        }
      });
    });
    
    client.on('error', (err) => {
      clearTimeout(timeout);
      log(colors.red, 'MQTTS', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
      resolve({ protocol: 'MQTTS', success: false, error: err.message });
    });
  });
}

function testWS() {
  return new Promise((resolve) => {
    log(colors.cyan, 'WS', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...');
    
    const client = mqtt.connect(config.ws.url);
    
    const timeout = setTimeout(() => {
      client.end();
      resolve({ protocol: 'WS', success: false, error: 'Timeout' });
    }, 5000);
    
    client.on('connect', () => {
      clearTimeout(timeout);
      log(colors.green, 'WS', 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      const message = JSON.parse(testMessage);
      message.protocol = 'WebSocket';
      
      client.publish('test/ws', JSON.stringify(message), (err) => {
        if (err) {
          log(colors.red, 'WS', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`);
          client.end();
          resolve({ protocol: 'WS', success: false, error: err.message });
        } else {
          log(colors.green, 'WS', '–°–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
          client.end();
          resolve({ protocol: 'WS', success: true });
        }
      });
    });
    
    client.on('error', (err) => {
      clearTimeout(timeout);
      log(colors.red, 'WS', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
      resolve({ protocol: 'WS', success: false, error: err.message });
    });
  });
}

function testWSS() {
  return new Promise((resolve) => {
    log(colors.yellow, 'WSS', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Secure...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if (!fs.existsSync(config.wss.cert)) {
      log(colors.red, 'WSS', 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      resolve({ protocol: 'WSS', success: false, error: 'Certificate not found' });
      return;
    }
    
    const clientOptions = {
      rejectUnauthorized: false, // –î–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      ca: fs.readFileSync(config.wss.cert)
    };
    
    const client = mqtt.connect(config.wss.url, clientOptions);
    
    const timeout = setTimeout(() => {
      client.end();
      resolve({ protocol: 'WSS', success: false, error: 'Timeout' });
    }, 5000);
    
    client.on('connect', () => {
      clearTimeout(timeout);
      log(colors.green, 'WSS', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      
      const message = JSON.parse(testMessage);
      message.protocol = 'WebSocket Secure';
      
      client.publish('test/wss', JSON.stringify(message), (err) => {
        if (err) {
          log(colors.red, 'WSS', `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`);
          client.end();
          resolve({ protocol: 'WSS', success: false, error: err.message });
        } else {
          log(colors.green, 'WSS', '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WSS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
          client.end();
          resolve({ protocol: 'WSS', success: true });
        }
      });
    });
    
    client.on('error', (err) => {
      clearTimeout(timeout);
      log(colors.red, 'WSS', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
      resolve({ protocol: 'WSS', success: false, error: err.message });
    });
  });
}

async function runTests() {
  console.log(`${colors.bright}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö MQTT –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...${colors.reset}`);
  console.log(`üåê –î–æ–º–µ–Ω: ${colors.cyan}${domain}${colors.reset}\n`);
  
  const tests = [
    testMQTT(),
    testMQTTS(), 
    testWS(),
    testWSS()
  ];
  
  const results = await Promise.all(tests);
  
  console.log(`\n${colors.bright}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${colors.reset}`);
  console.log('‚ïê'.repeat(50));
  
  let successCount = 0;
  results.forEach(result => {
    const status = result.success ? 
      `${colors.green}‚úÖ SUCCESS${colors.reset}` : 
      `${colors.red}‚ùå FAILED${colors.reset}`;
    
    console.log(`${result.protocol.padEnd(8)} | ${status} ${result.error ? `(${result.error})` : ''}`);
    
    if (result.success) successCount++;
  });
  
  console.log('‚ïê'.repeat(50));
  console.log(`–£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length} –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤`);
  
  if (successCount === results.length) {
    console.log(`\n${colors.green}üéâ –í—Å–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!${colors.reset}`);
  } else {
    console.log(`\n${colors.yellow}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.${colors.reset}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ mqtt –ø–∞–∫–µ—Ç
try {
  require.resolve('mqtt');
} catch (e) {
  console.error(`${colors.red}‚ùå –ü–∞–∫–µ—Ç 'mqtt' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ:`);
  console.error(`   npm install mqtt${colors.reset}`);
  process.exit(1);
}

runTests().catch(console.error); 
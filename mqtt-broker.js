const process = require('process');
const aedes = require('aedes')();
const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
const config = require('./config');
const TransportManager = require('./transport-manager');
const PatternAnalyzer = require('./pattern-analyzer');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const transportManager = new TransportManager(config, aedes);
const patternAnalyzer = new PatternAnalyzer();

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const deviceData = {
  clients: {},
  topics: {},
  messages: [],
  transports: {}
};

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logsDir = config.get().logging.directory;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
aedes.on('client', (client) => {
  const timestamp = new Date().toISOString();
  console.log(`\n[${timestamp}] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${client.id}`);

  deviceData.clients[client.id] = {
    connectedAt: timestamp,
    messages: [],
    transport: 'unknown' // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  fs.appendFileSync(
    path.join(logsDir, 'connections.log'),
    `${timestamp} | CONNECT | Client: ${client.id}\n`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
aedes.on('clientDisconnect', (client) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${client.id}`);

  fs.appendFileSync(
    path.join(logsDir, 'connections.log'),
    `${timestamp} | DISCONNECT | Client: ${client.id}\n`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
transportManager.on('clientConnected', ({ clientId, transport }) => {
  console.log(`üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${transport}: ${clientId}`);
  
  if (deviceData.clients[clientId]) {
    deviceData.clients[clientId].transport = transport;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
  if (!deviceData.transports[transport]) {
    deviceData.transports[transport] = { connections: 0, messages: 0 };
  }
  deviceData.transports[transport].connections++;
});

transportManager.on('clientDisconnected', ({ clientId, transport }) => {
  console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${transport}: ${clientId}`);
  
  if (deviceData.transports[transport]) {
    deviceData.transports[transport].connections--;
  }
});

transportManager.on('transportStarted', ({ transport, port }) => {
  console.log(`üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ${transport} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});

transportManager.on('transportError', ({ transport, error }) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ${transport}:`, error.message);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  fs.appendFileSync(
    path.join(logsDir, 'errors.log'),
    `${new Date().toISOString()} | TRANSPORT_ERROR | ${transport} | ${error.message}\n`
  );
});

// –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä payload
function analyzePayload(payload) {
  const analysis = {
    raw: payload,
    hex: payload.toString('hex'),
    utf8: payload.toString('utf8'),
    base64: payload.toString('base64'),
    length: payload.length
  };

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ JSON
  try {
    analysis.json = JSON.parse(payload.toString('utf8'));
    analysis.type = 'JSON';
  } catch (e) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    if (payload.length > 4) {
      analysis.possibleStructure = {
        header: payload.slice(0, 4).toString('hex'),
        body: payload.slice(4).toString('hex')
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (payload.length === 4) {
      analysis.int32 = payload.readInt32BE(0);
      analysis.float32 = payload.readFloatBE(0);
    }

    analysis.type = 'BINARY';
  }

  return analysis;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
aedes.on('publish', (packet, client) => {
  if (!client) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

  const timestamp = new Date().toISOString();
  const analysis = analyzePayload(packet.payload);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞
  const clientTransport = deviceData.clients[client.id]?.transport || 'unknown';

  const message = {
    timestamp,
    clientId: client.id,
    topic: packet.topic,
    qos: packet.qos,
    retain: packet.retain,
    payload: analysis,
    transport: clientTransport
  };

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const patternStructure = patternAnalyzer.analyze(packet.topic, packet.payload);

  // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
  console.log(`\n[${timestamp}] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${clientTransport}:`);
  console.log(`  –ö–ª–∏–µ–Ω—Ç: ${client.id}`);
  console.log(`  –¢–æ–ø–∏–∫: ${packet.topic}`);
  console.log(`  QoS: ${packet.qos}, Retain: ${packet.retain}`);
  console.log(`  –î–∞–Ω–Ω—ã–µ (UTF8): ${analysis.utf8}`);
  console.log(`  –î–∞–Ω–Ω—ã–µ (HEX): ${analysis.hex}`);
  console.log(`  –¢–∏–ø: ${analysis.type}`);

  if (analysis.json) {
    console.log(`  JSON:`, analysis.json);
  }

  if (patternStructure) {
    console.log(`  –ü–∞—Ç—Ç–µ—Ä–Ω:`, patternStructure);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  if (deviceData.transports[clientTransport]) {
    deviceData.transports[clientTransport].messages++;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  deviceData.messages.push(message);
  if (!deviceData.topics[packet.topic]) {
    deviceData.topics[packet.topic] = [];
  }
  deviceData.topics[packet.topic].push(message);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  if (deviceData.clients[client.id]) {
    deviceData.clients[client.id].messages.push({
      timestamp,
      topic: packet.topic,
      payload: analysis,
      transport: clientTransport
    });
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
  fs.appendFileSync(
    path.join(logsDir, 'messages.log'),
    JSON.stringify(message, null, 2) + '\n---\n'
  );

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º payload –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const payloadFile = path.join(logsDir, `payload_${Date.now()}_${clientTransport}.bin`);
  fs.writeFileSync(payloadFile, packet.payload);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏
aedes.on('subscribe', (subscriptions, client) => {
  console.log(`\n–ö–ª–∏–µ–Ω—Ç ${client.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞:`,
    subscriptions.map(s => s.topic).join(', '));
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
setInterval(async () => {
  const analysisFile = path.join(logsDir, 'analysis.json');
  fs.writeFileSync(analysisFile, JSON.stringify(deviceData, null, 2));

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
  const report = {
    timestamp: new Date().toISOString(),
    totalMessages: deviceData.messages.length,
    totalClients: Object.keys(deviceData.clients).length,
    transports: {},
    topics: {}
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
  const transportStats = transportManager.getTransportStats();
  for (const [transportName, stats] of Object.entries(transportStats)) {
    report.transports[transportName] = {
      ...stats,
      messagesFromData: deviceData.transports[transportName]?.messages || 0,
      connectionsFromData: deviceData.transports[transportName]?.connections || 0
    };
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–ø–∏–∫–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞—Ö
  for (const topic in deviceData.topics) {
    const messages = deviceData.topics[topic];
    const transportBreakdown = {};
    
    messages.forEach(message => {
      const transport = message.transport || 'unknown';
      if (!transportBreakdown[transport]) {
        transportBreakdown[transport] = 0;
      }
      transportBreakdown[transport]++;
    });

    report.topics[topic] = {
      count: messages.length,
      payloadTypes: [...new Set(messages.map(m => m.payload.type))],
      averageSize: messages.reduce((sum, m) => sum + m.payload.length, 0) / messages.length,
      transportBreakdown
    };
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
  try {
    const healthStatus = await transportManager.getHealthStatus();
    report.transportHealth = healthStatus;
  } catch (error) {
    report.transportHealth = { error: error.message };
  }

  fs.writeFileSync(
    path.join(logsDir, 'report.json'),
    JSON.stringify(report, null, 2)
  );

  // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (${new Date().toLocaleTimeString()}):`);
  console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π: ${report.totalMessages}`);
  console.log(`   –ö–ª–∏–µ–Ω—Ç–æ–≤: ${report.totalClients}`);
  console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: ${Object.values(transportStats).filter(s => s.isRunning).length}`);
  
  Object.entries(report.transports).forEach(([name, stats]) => {
    if (stats.isRunning) {
      console.log(`   ${name}: ${stats.connectionsActive} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, ${stats.messagesReceived} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    }
  });
}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
aedes.on('error', (err) => {
  console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–∫–µ—Ä–∞:', err);
});

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initialize() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ MQTT –±—Ä–æ–∫–µ—Ä–∞-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...\n');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    await transportManager.initializeTransports();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    const results = await transportManager.startAll();
    
    if (results.started === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!');
      process.exit(1);
    }
    
    console.log(`\n‚úÖ MQTT –±—Ä–æ–∫–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`);
    console.log(`üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${logsDir}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å–Ω–µ—Ç
    const forceExitTimeout = setTimeout(() => {
      console.error('‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ timeout');
      process.exit(1);
    }, 300000); // 5 –º–∏–Ω—É—Ç
    
    // –£–±–∏—Ä–∞–µ–º timeout –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    clearTimeout(forceExitTimeout);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initialize().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});

// –î–æ–±–∞–≤–ª—è–µ–º graceful shutdown
process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);

async function shutdown() {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

  try {
    // Graceful shutdown –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    await transportManager.gracefulShutdown();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–æ–∫–µ—Ä aedes
    await new Promise((resolve) => {
      aedes.close(() => {
        console.log('‚úÖ MQTT –±—Ä–æ–∫–µ—Ä aedes –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve();
      });
    });

    console.log('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error.message);
    process.exit(1);
  }
}

// –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è PM2
if (process.send) {
  process.send('ready');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  fs.appendFileSync(
    path.join(logsDir, 'errors.log'),
    `${new Date().toISOString()} | UNCAUGHT | ${err.stack}\n`
  );
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π rejection:', reason);
  fs.appendFileSync(
    path.join(logsDir, 'errors.log'),
    `${new Date().toISOString()} | UNHANDLED | ${reason}\n`
  );
});